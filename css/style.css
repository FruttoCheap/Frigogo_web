/*! HTML5 Boilerplate v9.0.1 | MIT License | https://html5boilerplate.com/ */

/* main.css 3.0.0 | MIT License | https://github.com/h5bp/main.css#readme */
/*
 * What follows is the result of much research on cross-browser styling.
 * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,
 * Kroc Camen, and the H5BP dev community and team.
 */

/* ==========================================================================
   Base styles: opinionated defaults
   ========================================================================== */


html {
  color: #222;
  font-size: 1em;
  line-height: 1.4;
}

/*
 * Remove text-shadow in selection highlight:
 * https://twitter.com/miketaylr/status/12228805301
 *
 * Customize the background color to match your design.
 */

::-moz-selection {
  background: #b3d4fc;
  text-shadow: none;
}

::selection {
  background: #b3d4fc;
  text-shadow: none;
}

/*
 * A better looking default horizontal rule
 */

hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}

/*
 * Remove the gap between audio, canvas, iframes,
 * images, videos and the bottom of their containers:
 * https://github.com/h5bp/html5-boilerplate/issues/440
 */

audio,
canvas,
iframe,
img,
svg,
video {
  vertical-align: middle;
}

/*
 * Remove default fieldset styles.
 */

fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

/*
 * Allow only vertical resizing of textareas.
 */

textarea {
  resize: vertical;
}

/* ==========================================================================
   Author's custom styles
   ========================================================================== */

/* ==========================================================================
   Helper classes
   ========================================================================== */

/*
 * Hide visually and from screen readers
 */

.hidden,
[hidden] {
  display: none !important;
}

/*
 * Hide only visually, but have it available for screen readers:
 * https://snook.ca/archives/html_and_css/hiding-content-for-accessibility
 *
 * 1. For long content, line feeds are not interpreted as spaces and small width
 *    causes content to wrap 1 word per line:
 *    https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe
 */

.visually-hidden {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;
  /* 1 */
}

/*
 * Extends the .visually-hidden class to allow the element
 * to be focusable when navigated to via the keyboard:
 * https://www.drupal.org/node/897638
 */

.visually-hidden.focusable:active,
.visually-hidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  white-space: inherit;
  width: auto;
}

/*
 * Hide visually and from screen readers, but maintain layout
 */

.invisible {
  visibility: hidden;
}

/*
 * Clearfix: contain floats
 *
 * The use of `table` rather than `block` is only necessary if using
 * `::before` to contain the top-margins of child elements.
 */

.clearfix::before,
.clearfix::after {
  content: "";
  display: table;
}

.clearfix::after {
  clear: both;
}

/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */

@media only screen and (min-width: 35em) {
  /* Style adjustments for viewports that meet the condition */
}

@media print,
  (-webkit-min-device-pixel-ratio: 1.25),
  (min-resolution: 1.25dppx),
  (min-resolution: 120dpi) {
  /* Style adjustments for high resolution devices */
}

/* ==========================================================================
   Print styles.
   Inlined to avoid the additional HTTP request:
   https://www.phpied.com/delay-loading-your-print-css/
   ========================================================================== */

@media print {
  *,
  *::before,
  *::after {
    background: #fff !important;
    color: #000 !important;
    /* Black prints faster */
    box-shadow: none !important;
    text-shadow: none !important;
  }

  a,
  a:visited {
    text-decoration: underline;
  }

  a[href]::after {
    content: " (" attr(href) ")";
  }

  abbr[title]::after {
    content: " (" attr(title) ")";
  }

  /*
   * Don't show links that are fragment identifiers,
   * or use the `javascript:` pseudo protocol
   */
  a[href^="#"]::after,
  a[href^="javascript:"]::after {
    content: "";
  }

  pre {
    white-space: pre-wrap !important;
  }

  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }

  tr,
  img {
    page-break-inside: avoid;
  }

  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }

  h2,
  h3 {
    page-break-after: avoid;
  }
}

/*
vars
*/
:root {
  --carousel-transition-duration: 250ms;
  --carousel-transition-ease: ease-out;
  --carousel-bg-color-rgb: 0, 0, 0;
  --carousel-shadow-color-rgb: 128, 128, 128;
  --carousel-item-width: 11.5rem;
  --carousel-item-height: 23rem;
  --carousel-item-hover-effect: 1.075;
  --carousel-item-reflection-blur: 0.25rem;
  --carousel-item-empty-color-rgb: 255, 255, 255;
  --carousel-item-glow-color-rgb: 255, 255, 255;
  --carousel-item-glow-size: 10rem;
  --carousel-diameter: 50rem;
  --carousel-3d-perspective: 1000px;
  --carousel-3d-perspective-origin: 50% 20%;
  --carousel-control-button-width: 1.25rem;
  --carousel-control-button-height: 0rem;
  --carousel-control-color-rgb: 255, 255, 255;
  --carousel-animation-duration: 25s;
  --carousel-animation-play-state: running;
  --carousel-direction-animation-play-state: paused;
}

/*
global
*/
*, *::before, *::after {
  margin: 0;
  padding: 0;
  border: 0;
  box-sizing: border-box;
}

*:focus {
  outline: none;
}

a {
  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
  -webkit-tap-highlight-color: transparent;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

body {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: rgb(var(--carousel-bg-color-rgb));
  overflow: hidden;
  height: 100%;
  overflow-y: auto;
}

/*
carousel
*/
.carousel {
  --_diameter: var(--carousel-diameter);
  --_radius: calc(var(--_diameter) / 2);
  --_item-width: var(--carousel-item-width);
  --_item-height: var(--carousel-item-height);
  perspective: var(--carousel-3d-perspective);
  perspective-origin: var(--carousel-3d-perspective-origin);
  width: var(--_diameter);
  height: var(--_diameter);
}

@media only screen and (max-width: 48rem) {
  .carousel {
    --_diameter: calc(var(--carousel-diameter) * 0.75);
    --_item-width: calc(var(--carousel-item-width) * 0.75);
    --_item-height: calc(var(--carousel-item-height) * 0.75);
  }
}

@media only screen and (max-width: 32rem) {
  .carousel {
    --_diameter: calc(var(--carousel-diameter) * 0.6);
    --_item-width: calc(var(--carousel-item-width) * 0.6);
    --_item-height: calc(var(--carousel-item-height) * 0.6);
  }
}

@media only screen and (max-width: 16rem) {
  .carousel {
    --_diameter: calc(var(--carousel-diameter) * 0.25);
    --_item-width: calc(var(--carousel-item-width) * 0.25);
    --_item-height: calc(var(--carousel-item-height) * 0.25);
  }
}

.carousel .carousel-control-button {
  --_width: var(--carousel-control-button-width);
  --_height: var(--carousel-control-button-height);
  z-index: 1;
  width: var(--_width);
  height: var(--_height);
  background-color: rgb(var(--carousel-control-color-rgb));
  opacity: 0.2;
  transition: opacity var(--carousel-transition-duration) var(--carousel-transition-ease);
  position: absolute;
}
.carousel .carousel-control-button:hover {
  opacity: 0.4;
}
.carousel .carousel-control-button:has(input:checked) {
  opacity: 0.8;
}

.carousel .carousel-control-button input {
  -webkit-appearance: none;
  appearance: none;
  opacity: 0;
  width: 100%;
  height: 100%;
  cursor: pointer;
}

.carousel .carousel-control-button.left {
  clip-path: polygon(0% 50%, 100% 0%, 100% 100%);
  top: calc(var(--_radius) - var(--_height) / 2);
  left: 0;
}
.carousel:has(.carousel-control-button.left input:checked) {
  --carousel-direction-animation-play-state: running;
}

.carousel .carousel-control-button.right {
  clip-path: polygon(0% 0%, 100% 50%, 0% 100%);
  top: calc(var(--_radius) - var(--_height) / 2);
  right: 0;
}
.carousel:has(.carousel-control-button.right input:checked) {
  --carousel-direction-animation-play-state: paused;
}

.carousel .carousel-rotation-direction {
  --_direction-animation-play-state: var(--carousel-direction-animation-play-state);
  --_z: calc(var(--_radius) * -1);
  transform: translateZ(var(--_z));
  transform-style: preserve-3d;
  animation: carousel-rotation-reverse calc(var(--carousel-animation-duration) / 2) reverse linear infinite var(--_direction-animation-play-state);
  transition: all var(--carousel-transition-duration) var(--carousel-transition-ease);
}

@keyframes carousel-rotation-reverse {
  from {transform: translateZ(var(--_z)) rotateY(0deg);}
  to {transform: translateZ(var(--_z)) rotateY(360deg);}
}

@keyframes carousel-rotation-normal {
  from {transform: rotateY(0deg);}
  to {transform: rotateY(360deg);}
}

.carousel .carousel-item-wrapper {
  transform-style: inherit;
  width: inherit;
  height: inherit;
  list-style-type: none;
  position: relative;
  animation: carousel-rotation-normal var(--carousel-animation-duration) normal linear infinite var(--carousel-animation-play-state);
  transition: all var(--carousel-transition-duration) var(--carousel-transition-ease);
}

.carousel .carousel-rotation-direction:has(.carousel-item:hover) {
  --carousel-animation-play-state: paused;
  --_direction-animation-play-state: paused;
}

.carousel .carousel-item {
  --_width: var(--_item-width);
  --_height: var(--_item-height);
  --_rotation: calc(360 / var(--_num-elements) * var(--_index) * 1deg);
  left: calc(var(--_radius) - var(--_item-width) / 2);
  top: calc(var(--_radius) - var(--_item-height) / 2);
  transform: rotateY(var(--_rotation)) translateZ(var(--_radius));
  transform-style: inherit;
  width: var(--_width);
  height: var(--_height);
  transition: all var(--carousel-transition-duration) var(--carousel-transition-ease);
  box-shadow: 0 0 var(--carousel-item-glow-size) transparent;
  position: absolute;
}

.carousel .carousel-item:hover {
  box-shadow: 0 0 var(--carousel-item-glow-size) rgb(var(--carousel-item-glow-color-rgb));
  transform: rotateY(var(--_rotation)) translateZ(calc(var(--_radius) * var(--carousel-item-hover-effect)));
}

.carousel .carousel-item a {
  display: block;
  width: inherit;
  height: inherit;
  text-indent: -9999px;
  background-color: rgba(var(--carousel-item-empty-color-rgb), 0.1);
  background-image: var(--_image-url);
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  transition: filter var(--carousel-transition-duration) var(--carousel-transition-ease);
  filter: grayscale(100%);
}

.carousel .carousel-item:hover a {
  filter: grayscale(0%);
}

.carousel .carousel-item::before {
  content: '';
  width: inherit;
  height: inherit;
  background-color: rgba(var(--carousel-item-empty-color-rgb), 0.1);
  background-image:
    linear-gradient(to top, rgba(var(--carousel-bg-color-rgb), 0.25) 0%, rgba(var(--carousel-bg-color-rgb), 1.0) 25%),
    var(--_image-url);
  background-repeat: no-repeat;
  background-position: center;
  background-size: cover;
  pointer-events: none;
  filter: blur(var(--carousel-item-reflection-blur)) grayscale(100%);
  transition: filter var(--carousel-transition-duration) var(--carousel-transition-ease);
  transform-style: inherit;
  transform-origin: center bottom;
  transform: rotateX(90deg) rotateZ(180deg) rotateY(180deg);
  position: absolute;
}

.carousel .carousel-item:hover::before {
  filter: blur(var(--carousel-item-reflection-blur)) grayscale(0%);
}

.carousel .carousel-ground {
  --_width: var(--_diameter);
  --_height: var(--_diameter);
  --_rotation: 90deg;
  left: calc(var(--_radius) - var(--_width) / 2);
  top: calc(var(--_radius) - var(--_height) / 2);
  transform: rotateX(var(--_rotation)) translateZ(calc(var(--_item-height) / -2));
  width: var(--_width);
  height: var(--_height);
  border-radius: 50%;
  background: radial-gradient(rgba(var(--carousel-shadow-color-rgb), 0.75) 15% , rgba(var(--carousel-bg-color-rgb), 0) 60%);
  opacity: 0.2;
  transition: opacity var(--carousel-transition-duration) var(--carousel-transition-ease);
  position: absolute;
}

.carousel .carousel-item-wrapper:has(.carousel-item:hover) .carousel-ground {
  opacity: 0.25;
}
